// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  COMPLETE
  FAILED
  PENDING
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
}

enum Role {
  ADMIN
  USER
}

enum PaymentTransactionStatus {
  SUCCESS
  FAILED
}

model User {
  id               String        @id @default(uuid()) @db.Uuid
  username         String        @unique
  email            String        @unique
  password         String
  phone            String
  shippingAddress  String
  hashed_rt        String?       @default("")
  verify           Boolean       @default(false)
  verificationCode String        @unique

  role             Role          @default(USER) @map("role")
  orders           Order[]
  orderDetail      OrderDetail[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Product {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  description  String?
  quantity     Int           @default(0)
  price        Float
  category     String
  orderDetails OrderDetail[]
}

model Order {
  order_id        String         @id @default(uuid()) @db.Uuid
  user_id         String?         @db.Uuid
  user            User?           @relation(fields: [user_id], references: [id],onDelete: SetNull)
  total_amount    Float
  payment_status  PaymentStatus
  delivery_status DeliveryStatus @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  order_details OrderDetail[]
  Payment       Payment[]
}

model OrderDetail {
  order_detail_id String @id @default(uuid()) @db.Uuid

  order_id String? @db.Uuid
  order    Order?  @relation(fields: [order_id], references: [order_id])

  product_id String  @db.Uuid
  product    Product @relation(fields: [product_id], references: [id])

  user_id String? @db.Uuid
  user    User?   @relation(fields: [user_id], references: [id],onDelete: SetNull)

  quantity          Int
  price_at_purchase Float
}

model Payment {
  payment_id     String                   @id @default(uuid()) @db.Uuid
  order_id       String                   @db.Uuid
  order          Order                    @relation(fields: [order_id], references: [order_id])
  total_amount   Float
  payment_status PaymentTransactionStatus
  transaction_id String
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
}
